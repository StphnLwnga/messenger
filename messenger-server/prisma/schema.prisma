// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now()) @db.Date
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  
  messages Message[]

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String? @db.String

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  lastMessageAt DateTime @default(now()) @db.Date
  isGroup       Boolean?
  createdAt     DateTime @default(now()) @db.Date
  updatedAt     DateTime @updatedAt

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  messageIds String[]  @db.ObjectId
  messages   Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String?       @db.ObjectId
  Conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String? @db.ObjectId
  sender   User?   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
